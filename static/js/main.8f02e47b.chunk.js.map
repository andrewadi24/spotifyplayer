{"version":3,"sources":["spotify.js","logo.svg","Login.js","Main.js","App.js","reportWebVitals.js","index.js"],"names":["loginUrl","join","Login","class","href","SpotifyApi","require","SpotifyWebApi","clientId","Main","props","useState","setAccessToken","token","search","setsearch","dropdown","setdropdrown","currentsong","setcurrentsong","play","setplay","lyric","setlyric","functionSearch","string","startsWith","searchTracks","then","res","ls","body","tracks","items","i","push","onClick","console","log","song","artists","name","uri","options","apiKey","title","artist","optimizeQuery","getLyrics","lyrics","all_lines","split","elem","length","functionplay","useEffect","type","placeholder","value","onChange","e","target","uris","styles","activeColor","bgColor","color","loaderColor","sliderColor","trackArtistColor","trackNameColor","callback","state","isPlaying","App","setToken","hash","window","location","substring","reduce","initial","item","parts","decodeURIComponent","_token","access_token","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f02e47b.chunk.js","sourcesContent":["export const authEndpoint =  \"https://accounts.spotify.com/authorize\"\r\nconst redirectUri = \"http://localhost:3000/\"\r\nconst clientID = \"a9d6d0309cad40db94b06e3218e338f6\"\r\nconst scopes = [\r\n    \"user-read-currently-playing\",\r\n    \"user-read-recently-played\",\r\n    \"user-read-playback-state\",\r\n    \"user-top-read\",\r\n    \"user-modify-playback-state\",\r\n    \"streaming\",\r\n    \"user-read-email\",\r\n    \"user-read-private\",\r\n]\r\nexport const getTokenFromUrl = () =>{\r\n    return window.location.hash.substring(1).split(\"&\").reduce((initial, item) => {\r\n        var parts = item.split('=')\r\n        initial[parts[0]] = decodeURIComponent(parts[1])\r\n        return initial\r\n    }, {});\r\n}\r\nexport const loginUrl = `${authEndpoint}?client_id=${clientID}&redirect_uri=${redirectUri}&scope=${scopes.join(\r\n    \"%20\"\r\n    )}&response_type=token&show_dialog=true`\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport { loginUrl } from './spotify'\r\nimport './Login.css'\r\nfunction Login() {\r\n    return (\r\n        <div class=\"container\">\r\n            <div class= \"login-button\">\r\n            <a href={loginUrl}>Login with spotify</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react'\r\nimport SpotifyPlayer from 'react-spotify-web-playback/lib'\r\nimport token from './App.js'\r\nimport './Main.css'\r\nimport { useState } from 'react'\r\nimport SpotifyWebApi from 'spotify-web-api-node'\r\nimport { getLyrics, getSong } from 'genius-lyrics-api';\r\nvar lyr = require('lyrics-fetcher');\r\nconst youtubesearchapi=require('youtube-search-api');\r\n\r\nconst SpotifyApi = new SpotifyWebApi({\r\n    clientId: \"a9d6d0309cad40db94b06e3218e338f6\",\r\n})\r\nconst Main = (props) => {\r\n    const [youtube, setyoutube] = useState(\"\")\r\n    let src =\"\"\r\n    SpotifyApi.setAccessToken(props.token)\r\n    const [search, setsearch] = useState(\"\")\r\n    const [dropdown, setdropdrown] = useState([])\r\n    const [currentsong, setcurrentsong] = useState()\r\n    const [play, setplay] = useState(false)\r\n    const [lyric, setlyric] = useState([])\r\n    useEffect(() =>  setplay(true), [currentsong])\r\n    function functionplay(song){\r\n        console.log(song)\r\n        let artists = song.artists.join()\r\n        let title = song.name + artists\r\n        setcurrentsong(song.uri)\r\n        setsearch(\"\")\r\n        functionSearch(\"\")\r\n        const options = {\r\n            apiKey: 'sqIqY1_G5uoKy-0za0-QhWiAYOtOjOGuYKtmVbaxLQXNNAfl-q9v-5auGO8QE-tF',\r\n            title: song.name,\r\n            artist: artists,\r\n            optimizeQuery: true\r\n        };\r\n        getLyrics(options).then((lyrics) => {\r\n            if(!lyrics){\r\n                setlyric([<p>{\"No lyrics found\"}</p>])\r\n                return\r\n            }\r\n            let all_lines = lyrics.split(\"\\n\")\r\n            console.log(all_lines)\r\n            let elem = []\r\n            for (let i = 0; i<all_lines.length; i++){\r\n                elem.push(<p>{all_lines[i]}</p>)\r\n            }\r\n            setlyric(elem)\r\n        });\r\n    }\r\n    function functionSearch(string){\r\n       /* list */\r\n       if (string==\"\" || string.startsWith(\" \")){\r\n           setdropdrown([])\r\n           return\r\n       }\r\n       SpotifyApi.searchTracks(string).then(res =>{\r\n           var ls = res.body.tracks.items\r\n           let items=[]\r\n            for(let i = 0; i<ls.length; i++){\r\n                items.push(<div class=\"song\" onClick={() =>{\r\n                    console.log(ls[i])\r\n                    functionplay(ls[i])\r\n                }}>{ls[i].name}</div>)\r\n            }\r\n            setdropdrown(items)\r\n       })\r\n    }\r\n    return (\r\n        <div class=\"page\">\r\n            <div class=\"navbar\">\r\n                <div class=\"containerr\">\r\n                <h1>Custom spotify player</h1>\r\n                <div class=\"input\">\r\n                <input type=\"search\" placeholder='Search by song, artist, or lyric' value={search} onChange={e => {\r\n                    setsearch(e.target.value)\r\n                    functionSearch(e.target.value)\r\n                }\r\n                    }></input>\r\n                <div class=\"dropdown\">\r\n                    \r\n                    {dropdown}\r\n                    \r\n                </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"container1\">\r\n                <div class=\"lyric\">\r\n                {lyric}\r\n                </div>\r\n            <div class=\"player\">\r\n                <SpotifyPlayer \r\n                token={props.token}\r\n                 uris={currentsong ? [currentsong] : []}\r\n                 styles={{\r\n                     activeColor: '',\r\n                     bgColor:'#222',\r\n                     color:'white',\r\n                     loaderColor:'#fff',\r\n                     sliderColor:'red',\r\n                     trackArtistColor: '#2c5',\r\n                     trackNameColor:'#2c5'\r\n                 }}\r\n                 callback={state =>{\r\n                     if(!state.isPlaying)setplay(false)\r\n                 }}\r\n                 play={play}\r\n                 />\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import logo from './logo.svg';\nimport './App.css';\nimport SpotifyPlayer from 'react-spotify-web-playback';\nimport Login from './Login.js'\nimport { useState, useEffect, Component } from 'react';\nimport { getTokenFromUrl } from './spotify';\nimport Main from './Main'\n/* const spotify = new spotify() */\nfunction App() {\n  const [token, setToken] = useState();\n  useEffect(() =>{\n    const hash  = getTokenFromUrl() \n    window.location.hash=\"\"\n    const _token = hash.access_token\n    if (_token){\n      setToken(_token)\n    }\n  }, [])\n  return (\n    <div className=\"App\">\n      {token ? (\n      <Main token={token}></Main>\n      ) : \n      \n      (<Login></Login>)} \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}